<html>

<head>
  <link href="<%=settings.public_url%>mapjs.css" rel="stylesheet" />
</head>

<body>

<style type="text/css">
  .header {
    position: fixed;
    width: 100%;
    top: 0;
    height: 30px;
    background: silver;
    border-bottom: 1px solid black;
  }
  .status {
    right: 0px;
    position: absolute;
    padding-right: 20px;
  }
  body {
    padding: 0;
    margin: 0;
  }
  .filename {
    font-size: 20px;
    font-weight: bold;
    padding-left: 20px;
    padding-right: 20px;
    text-decoration: none;
    color: black;
    cursor: pointer;
  }
  .profile.email {
    font-size: 10px;
    padding-left: 20px;
    padding-right: 20px;
  }
  #container {
    position:absolute;
    background-color: #FFFFFF;
    height: 100%;
    width: 100%;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
    margin:0;
    padding:0;
  }
  .modal {
    position: absolute;
    top: 30%;
    left: 30%;
    width: 40%;
    height: 40%;
    background-color: yellow;
    border: 2px solid black;
    display: none;
    z-index: 9999;
  }
</style>
<div class="header">
  <a class="filename" title="Rename"></a>
  <span class="profile email"></span>
  <span id="status" class="status">
    Initialising...
  </span>

<div id="manual-login" style="display:none">
  Could not log in automatically. Please <button id="login">Sign In With Google</button>
</div>
  
</div>


<div id="container">
</div>
<div id="icon_editor" class="modal">
  <div role="auth">
    <h2>Can we list your Google Photos?</h2>
    <p> MindMup allows users to insert images and pictures from their Google Photos storage.  Google did not automatically allow this for your account, so please click <b>Allow</b> 
    to open a Google Drive authorisation window and approve access.</p>
    <button role="approve">Approve</button>
  </div>
</div>
<%= erb :vendor_scripts %>
<%= erb :own_scripts %>

<script>

var setStatus = function (statusMsg) {
    document.getElementById('status').innerHTML=statusMsg;
  },
  defaultTitle = 'all new untitled mind map',
  filePathPrefix = '/drive/file/',
  minimalAuthenticatorConfig = {
      client_id:'<%=ENV['GOOGLE_OAUTH_CLIENT_ID']%>', 
      scope: '<%=settings.startup_drive_scopes%>',
      'cookie_policy': 'single_host_origin'
  },
  imageSelectorAuthenticatorConfig = _.extend({}, minimalAuthenticatorConfig, {
      scope: '<%=settings.image_selector_drive_scopes%>'
  }),
  initialContent = {id: 1, title: defaultTitle},
  mm2CollaborationModel = new MM2.CollaborationModel(initialContent),
  activeContentListener = new MM2.CollaborationModelActiveContentListener(mm2CollaborationModel),
  authenticator = new MM2.GoogleAuthenticatorService(minimalAuthenticatorConfig),
  imageSelectorAuthenticator = new MM2.GoogleAuthenticatorService(imageSelectorAuthenticatorConfig),
  googleAppId = '<%=ENV['GOOGLE_APP_ID']%>',
  googleDriveService = new MM2.GoogleDriveService(),
  googleDrivePageController = new MM2.GoogleDrivePageController (defaultTitle, filePathPrefix, authenticator, googleDriveService, googleAppId);
	isTouch = false,
  getStorage = function () {
    try {
      window.localStorage.setItem('testkey', 'testval');
      if (window.localStorage.getItem('testkey') === 'testval') {
        return window.localStorage;
      }
    } catch (e) {
    }
    return {
      fake: true,
      getItem: function (key) {
        return this[key];
      },
      setItem: function (key, val) {
        this[key] = val;
      },
      removeItem: function (key) {
        delete this[key];
      }
    };
  },
  mapModel = new MAPJS.MapModel(MAPJS.DOMRender.layoutCalculator, ['Press Space or double-click to edit'] /*, objectClipboard*/),
  imageInsertController = observable({}),
  activityLog = console,
  initWidgets = function () {
    var container = jQuery('#container');
    container.domMapWidget(activityLog, mapModel, isTouch, imageInsertController, container, _.identity);
    jQuery('#icon_editor').googlePhotosIconEditor(mapModel, imageSelectorAuthenticator, googleAppId);
	},
	handleDriveRealtimeErrors = function(error) {
		if (error === 'token-refresh-required') {
			authenticator.refreshToken();
		} else {
			console.log(error);
			setStatus('Error', error);
		}
	};

window.addEventListener('MM:GoogleScriptsFailed', function () {
  setStatus('Sadly, Google Script Loading failed!');
});

window.addEventListener('MM:GoogleScriptsLoaded', function () {
  if (!window.jQuery) {
    setStatus('Sadly, Vendor Script Loading failed!');
    }
  var pageInitialised = function (fileId, fileName, userProfile) {
    $('#manual-login').hide();
    $('.filename').text(fileName).on('click', function () {
       var newName = prompt('New file name', this.innerHTML);
        if (newName) {
          googleDriveService.renameFile(fileId, newName).then(function (fileMeta) {
            document.title = fileMeta.title;
            $('.filename').text(fileMeta.title);
          }, 
          function (jqXHR, errorText, thrownError) {
            console.log(thrownError);
            setStatus('Sadly, renaming failed ' + errorText);
          });
        }
    });
    document.title = fileName;
		$('.profile.email').text(userProfile.getEmail());
		window.setInterval(authenticator.refreshToken, 10 * 60 * 1000);
		MM2.mediateDriveRealtimeEvents(fileId, mm2CollaborationModel, handleDriveRealtimeErrors);
		MAPJS.DOMRender.stageVisibilityMargin = {top: 20, bottom: 20, left: 160, right: 160}; /* required for popover positioning */
		MAPJS.DOMRender.stageMargin = {top: 20, bottom: 20, left: 170, right: 170}; /* required for popover positioning */
		initWidgets();
  }, 
  handleControllerErrors = function (reason) {
    if (reason === 'not-authenticated') {
      $('#manual-login').show();  
    } else {
      setStatus(reason);
    }
  };
  googleDrivePageController.initPage().then(pageInitialised, handleControllerErrors, setStatus);
  $('#login').on('click', function () {
    googleDrivePageController.initPage(true).then(pageInitialised, handleControllerErrors, setStatus);
  });
});

activeContentListener.addEventListener('mm-active-content-changed', function (activeContent, newSession, method, args) {
  if (newSession) {
    console.log('new session', activeContent);
		mapModel.setIdea(activeContent);
  }
  else {
    console.log('change event', method, args);
  }
});
mm2CollaborationModel.addEventListener('sessionInitialized', function () {
  setStatus('document loaded');
});

</script>
<%= erb :google_load_scripts %>
</body>
</html>
