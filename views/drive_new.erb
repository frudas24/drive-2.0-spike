<h1>Drive</h1>
<span id="status">
  Initialising...
</span>
<div id="manual-login" style="display:none">
  Could not log in automatically. Please <button id="login">Sign In With Google</button>
</div>
<%= erb :vendor_scripts %>
<%= erb :own_scripts %>

<script>
var setStatus = function (statusMsg) {
    document.getElementById('status').innerHTML=statusMsg;
  },
  defaultTitle = 'all new untitled mind map',
  filePathPrefix = '/drive/file/',
  initialContent = {id: 1, title: defaultTitle},
  queryStringParams = window.location.search.substr(1).split('&').reduce(
    function (memo, component) {
      var kvp = component.split('=').map(decodeURIComponent); 
      memo[kvp[0]]=kvp[1];
      return memo;
    }, {}
  ),
  driveState = (queryStringParams.state && JSON.parse(queryStringParams.state)) || {},
  fileIdFromUrl = function () {
    var r= new RegExp('^' + filePathPrefix.replace(/\//g,'\\/') + '(.*)'),
        match = window.location.pathname.match(r);
    return match && match[1];
  }
  authenticator = new MM2.GoogleAuthenticatorService({
      client_id:'<%=ENV['GOOGLE_OAUTH_CLIENT_ID']%>', 
      scope: '<%=settings.startup_drive_scopes%>',
      'cookie_policy': 'single_host_origin'
  }),
  googleDriveService = new MM2.GoogleDriveService(),
  onRealtimeLoadError = function(error) {
    if (error.type == gapi.drive.realtime.ErrorType.TOKEN_REFRESH_REQUIRED) {
      setStatus('Session expired - please refresh');
      /*TODO: auto-refresh token*/
    } else if (error.type == window.gapi.drive.realtime.ErrorType.CLIENT_ERROR) {
      setStatus('An Error happened: ' + error.message);
    } else if (error.type == window.gapi.drive.realtime.ErrorType.NOT_FOUND) {
      setStatus('The file was not found. It does not exist or you do not have read access to the file.');
    } else if (error.type == window.gapi.drive.realtime.ErrorType.FORBIDDEN) {
      setStatus('You do not have access to this file. Try having the owner share it with you from Google Drive.');
    } else {
      console.log(error);
      setStatus('A network error occured during loading.');
    }
  },
  onFileLoaded = function(realtimeDoc) {
    setStatus('realtime doc loaded');
  },
  initializeModel = function(model) {
    setStatus('initializing model');
    model.getRoot().set('events', model.createList());
    model.getRoot().set('focusNodes', model.createMap());
    model.getRoot().set('initialContent', JSON.stringify(initialContent));
	},
	openFile = function (token, fileId) {
		googleDriveService.getMetaData(token, fileId).then(function(fileMeta) {
			/** TODO: check mime type, recognise if importing required **/
			window.history.replaceState({}, fileMeta.title, filePathPrefix + fileId);
			document.title = fileMeta.title;
			gapi.drive.realtime.load(fileId, onFileLoaded, initializeModel, onRealtimeLoadError);
		}, function (jqXHR, errorText, errorRaised) {
			setStatus('Sadly, loading file meta-data failed ' + errorText);
			/** TODO: Handle errors gracefully */
		});
	},
  postLogin = function(userProfile) {
    if (driveState.action === 'create') {
      setStatus('creating a file in folder ' + driveState.folderId + ' for user ' + userProfile.getEmail());
      googleDriveService.createShortcut(userProfile.getAuthToken(), defaultTitle, driveState.folderId).then(function (id) { 
        setStatus('File shortcut created: ' + id + ' for user ' + userProfile.getEmail());
				document.title= defaultTitle;
        window.history.replaceState({}, defaultTitle, filePathPrefix + id);
        gapi.drive.realtime.load(id, onFileLoaded, initializeModel, onRealtimeLoadError);
      }, function (textStatus, errorThrown) {
        setStatus('Sadly, creating a file failed: [' + textStatus + '] ' + errorThrown);
      });
    } else if (driveState.action === 'open') {
      if (driveState.ids && driveState.ids[0]) {
				openFile(userProfile.getAuthToken(), driveState.ids[0]);
      } else {
        setStatus('Sadly, no ID specified in the request');
      }
    } else if (fileIdFromUrl()) {
				openFile(userProfile.getAuthToken(), fileIdFromUrl());
    } else {
      setStatus('unsupported action');
    }
  };
window.addEventListener('MM:GoogleScriptsFailed', function () {
  setStatus('Sadly, Google Script Loading failed!');
});

window.addEventListener('MM:GoogleScriptsLoaded', function () {
  if (!window.jQuery) {
    setStatus('Sadly, Vendor Script Loading failed!');
  }

  if ((driveState && driveState.userId) || fileIdFromUrl()) {
    setStatus('signing in');
    authenticator.backgroundAuthenticate(driveState && driveState.userId).then(postLogin, function () {
      $('#manual-login').show();  
    });
  } else {
    setStatus('Invalid request - file ID not specified');
  }
  $('#login').on('click', function (token) {
    authenticator.modalAuthenticate(driveState && driveState.userId).then(function (profile) {
      $('#manual-login').hide();  
      postLogin(profile); 
    }, function () {
      setStatus('Sadly, login failed'); 
    });
  });
});

</script>
<%= erb :google_load_scripts %>

